# -*- coding: utf-8 -*-
####2017
#Check for twitter API and other changes if you are looking at this after 2017
#This script will delete tweets identified by tweetid listed in the input file
#from the twitter specified account

#Setup: 
# You will need to get the following
# 1.  consumer key 
#     consumer secret token  
#     access token
#     access token secret 
#     A. To do so, register a twitter application at https://apps.twitter.com
#     B. Ensure the application has read AND write access to be able to delete
#     C. To use this script register the name of this script as the name of app 
#        (without the .py part)
#     D. It is recommended that you delete the app (and remove its access to 
#        your profile) when not in use for the sake of security and
#        recreate and regenerate the keys and secrets when needed and edit
#        the program file as needed (cut and paste will cause minimal errors)
#  
#
# 2. A  .csv file with at least the 1st 6 fields populated per row
#    using the same format and column order as that of the archive file
#    generated by Twitter. The easiest way to do so is to use a Twitter
#    generated archive file and then edit the file as needed before use
#
#    Some necessary edits to use a copy of the twitter archive file:
#     A. Remove the header line
#     B. Remove any rows for any tweets you do not wish to delete
#     C. Trim the file to at most 1000 rows. (Script may handle more rows 
#        seamlessly which accounts for good error/status reporting but 
#        I haven’t tested this yet. Never ran into rate limits so far)
#     D. Currently the input file name is hardcoded "tweets_to_delete.csv"
#     E. Curently the output/logfile name is hardcoded "delstatfile"
#     F. You may want to look for strange newlines appearing as column1 
#        and eliminate them. I use vi/vim and it’s easy to join such lines
#        but there are other far better methods available as well.
#
#3. You may want to look at some simple Unix awk and grep scripts I wrote 
#   to post-process output file to do sanity checks that the desired results 
#   occurred e.g. Count status ids in both, check for failed messages, use
#   some/all failed status ids to manually look up tweet and verify status
#   etc. File named “awkex” is checked in.
#
#
# Future: I wrote this quickly to meet my need. If I was trying to do this
#         properly the following updates would make sense:
#     1. Use the keys and secrets in a more secure fashion (store in DB
#        encrypt or pass as command line parameters etc.)
#     2. Allow the input file name to be a command line parameter 
#     3. Allow the error file/output file name to be a command line parameter
#     4. Enforce no size limit on the input file 
#     5. Use an awk script wrapper to do all the set up work such as
#        generate input files(e.g. by date etc.), version and manage the output files 
#     6. For very large file sizes, utilize forked processes / multithreading
#     7. Use scripts to pre-process archive file to remove the strange newlines that
#        occasionally cause the csv.reader to pick something other than a status-id 
#
# While using the archive file feels like an extra step it makes the code
# run more efficiently for more use cases since 
# 1. You get to select which tweets to not delete by removing them from your copy 
#    of the archive file before executing the code
# 2. There are fewer api calls made as the script doesn't have to first
#    read the timeline or otherwise collect the tweetids from the server.
# 3. 1. Above is the only potentially time consuming forced manual step which could
#    be semi automated with custom unix scripts run on the .csv archive file as a 
#    pre-processing step
# 4. You can retain a copy of your archive (pre delete) and have it for posterity
#    Note: Archive won’t save your photos and some links may be unusable.


#@requirements:Python 2.5+,Tweepy (http://pypi.python.org/pypi/tweepy/1.7.1)
#@author: Miss Gitanjali GulveSehgal (A.K.A Gigi Sehgal)
#I  used oauth_login  lines from code samples  avaialble online - various authors.
####
#!/usr/bin/python

import csv
import tweepy
import tweepy.error


logfile = open("delstatfile","a")
CONSUMER_KEY = ''
CONSUMER_SECRET = ''
ACCESS_TOKEN = ''
ACCESS_TOKEN_SECRET = ''


def oauth_login(consumer_key, consumer_secret): 
    ####Authenticate with twitter using OAuth

    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth_url = auth.get_authorization_url()

    auth.set_access_token(ACCESS_TOKEN,ACCESS_TOKEN_SECRET)

    return tweepy.API(auth)

def batch_delete(api, del_file):
    print "You are about to Delete all selected tweets posted from account @%s . " % api.verify_credentials().screen_name
    print "Please confirm all details and only if certain type yes - there is NO UNDO!"
    do_delete = raw_input("> ")

    errors = 0
    if do_delete.lower() == 'yes':
        for row in del_file:
               print "calling api.destroy_status statusid =", row[0], " created on", row[3], " with text ", row[5] 
	       logfile.write("calling api.destroy_status with statusid = %s created on %s with text %s\n" %(row[0], row[3], row[5]))
               try:
               		api.destroy_status(row[0]) 
	       		print "Deleted: tweet with statusid = ", row[0]
	       		logfile.write("Deleted: tweet with statusid = %s\n"  %(row[0]))
	       		errors = errors
               except tweepy.error.TweepError as e:
               		errors = errors + 1
               		print "Failed to delete tweet got TweepError with statusid = ", row[0], " created on", row[3], " with text ", row[5] 
 	      		print "Error code reported : " 
			print (e.api_code)
	  		logfile.write("Failed to delete: tweet with statusid = %s and error code %d \n" %(row[0], e.api_code))
    else:
        print "Didn't understand input %s, quitting " % do_delete
        errors = errors
    return(errors)


mycsvfile = open("tweets_to_delete.csv","r")

csv_reader = csv.reader(mycsvfile, delimiter=',')
print "del_file set to %s " % csv_reader 

logfile.write("New batch session started \n")
api = oauth_login(CONSUMER_KEY, CONSUMER_SECRET)
print "Authenticated as: %s" % api.me().screen_name

batch_error = 0

batch_error = batch_delete(api,csv_reader)
if ( batch_error  == 0 ) :
    print "Deleted all needed tweetids as requested"
else :
    print "Found %d errors in bulk delete attempt " % batch_error 
